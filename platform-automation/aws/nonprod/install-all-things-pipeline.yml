resources:
  - name: platform-automation-tasks
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: .*tasks-(.*).zip

  - name: platform-automation-image
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: .*image-(.*).tgz

  - name: installation
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.installation))
      regexp: installation-(.*).zip

  - name: opsman-image
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: OpsManager(.*)onAWS.yml
      # regexp: ops-manager-aws-(.*).yml

  - name: pas-stemcell
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: pas-stemcell/light-bosh-stemcell-(.*)-aws.*\.tgz

  - name: pas-product
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: cf-(.*).pivotal

  - name: healthwatch-product
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: p-healthwatch-(.*).pivotal

  - name: healthwatch-stemcell
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: healthwatch-stemcell/light-bosh-stemcell-(.*)-aws.*\.tgz

  # configurations
  - name: configuration
    type: git
    source:
      private_key: ((combined.private_key))
      uri: ((combined.uri))
      branch: master

  - name: variable
    type: git
    source:
      private_key: ((combined.private_key))
      uri: ((combined.uri))
      branch: master

  - name: certificate
    type: s3
    source:
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.platform))
      regexp: nonprod/lets-encrypt-(.*).tgz

  # triggers used to have jobs do something in a timely manner
  - name: one-time-trigger
    type: time
    source:
      interval: 999999h

  - name: daily-trigger
    type: time
    source:
      interval: 24h

jobs:
  - name: install-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: one-time-trigger
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: opsman-image
          - get: configuration
          - get: variable
          - get: certificate
            params:
              unpack: true
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration
          vars: variable
        params:
          VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          STATE_FILE: ((foundation))/state/state.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-state
              output_mapping:
                repository-commit: configuration-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: ((foundation))/state/state.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'Update state file'
            - put: configuration
              params:
                repository: configuration-commit
                merge: true
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: variable
          config: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml
          AUTH_CONFIG_FILE: ((foundation))/vars/auth.yml
      - task: configure-ssl
        image: platform-automation-image
        config:
          platform: linux
          inputs:
          - name: env
          - name: certificate
          params:
            ENV_FILE: env.yml
            FULL_CHAIN_FILE: fullchain.pem
            PRIVKEY_FILE: privkey.pem
          run:
            path: sh
            args:
            - -c
            - |
              cat /var/version && echo ""
              set -eux
              om --env env/"${ENV_FILE}" update-ssl-certificate \
                --certificate-pem "$(cat certificate/${FULL_CHAIN_FILE})" \
                --private-key-pem "$(cat certificate/${PRIVKEY_FILE})"
        input_mapping:
          env: variable
          certificate: certificate
        params:
          ENV_FILE: ((foundation))/vars/env.yml
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          config: configuration
          env: variable
          vars: variable
        params:
          VARS_FILES: vars/((foundation))/vars/director-vars.yml
          ENV_FILE: ((foundation))/vars/env.yml
          DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml

  - name: export-installation
    serial: true
    plan:
      - aggregate:
          - get: daily-trigger
            trigger: true
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml
          INSTALLATION_FILE: installation-nonprod-$timestamp.zip
      - put: installation
        params:
          file: installation/installation-nonprod*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: one-time-trigger
            passed: [ install-opsman ]
          - get: platform-automation-image
            params:
              unpack: true
            # trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: opsman-image
          - get: installation
            passed: [ export-installation ]
          - get: configuration
          - get: variable
      - task: write-credhub-ca-cert
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: upgrade-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration
          env: variable
          vars: variable
        params:
          VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          ENV_FILE: ((foundation))/vars/env.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
          STATE_FILE: ((foundation))/state/state.yml
        ensure: *make-state-commit
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml

  - name: upload-and-stage-pas
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - install-opsman
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-product
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pas-product
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pas-product
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml

  - name: configure-pas
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: configure-pas
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
          env: variable
          vars: variable
        params:
          CONFIG_FILE: ((foundation))/config/cf.yml
          VARS_FILES: vars/((foundation))/vars/cf-vars.yml
          ENV_FILE: ((foundation))/vars/env.yml

  - name: upload-pas-stemcells
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-stemcell
            trigger: true
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: upload-pas-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: variable
          stemcell: pas-stemcell
        params:
          ENV_FILE: ((foundation))/vars/env.yml

  - name: upload-and-stage-healthwatch
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: healthwatch-product
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: healthwatch-product
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: healthwatch-product
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml

  - name: configure-healthwatch
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-healthwatch
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: configure-healthwatch
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
          env: variable
          vars: variable
        params:
          CONFIG_FILE: ((foundation))/config/healthwatch.yml
          VARS_FILES: vars/((foundation))/vars/healthwatch-vars.yml
          ENV_FILE: ((foundation))/vars/env.yml

  - name: upload-healthwatch-stemcells
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-healthwatch
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: healthwatch-stemcell
            trigger: true
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: upload-healthwatch-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: variable
          stemcell: healthwatch-stemcell
        params:
          ENV_FILE: ((foundation))/vars/env.yml

  - name: apply-product-changes
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - configure-pas
              - upload-pas-stemcells
              - configure-healthwatch
              - upload-healthwatch-stemcells
            # trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: ((credhub-secret))
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CA_CERT: ((credhub-ca-cert))
          PREFIX: '/pipeline/nonprod'
          INTERPOLATION_PATH: ((foundation))/vars
        input_mapping:
          files: variable
        output_mapping:
          interpolated-files: variable
      - task: apply-product-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: variable
        params:
          ENV_FILE: ((foundation))/vars/env.yml

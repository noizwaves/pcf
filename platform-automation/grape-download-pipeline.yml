resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: config
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration.uri))
    branch: master

- name: variable
  type: git
  source:
    private_key: ((variable.private_key))
    uri: ((variable.uri))
    branch: master

- name: opsman-product
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    secret_access_key: ((s3.secret_access_key))
    regexp: OpsManager(.*)Azure.yml

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

jobs:
- name: fetch-opsman
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: write-credhub-ca-cert
    params:
      CA_CERT_VALUE: ((credhub.ca_cert))
    output_mapping:
      certs: config
    input_mapping:
      files: config
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
          tag: edge
      inputs:
        - name: files
      outputs:
        - name: certs
      run:
        path: /bin/sh
        args:
        - -c
        - |
          cp -a files/. certs/

          # Format the cert correctly... because the env var lost its formatting
          echo $CA_CERT_VALUE > certs/temp
          echo "-----BEGIN CERTIFICATE-----" > certs/credhub_ca_cert
          cat certs/temp | sed -E 's/\s+/\r\n/g' | sed '/^-/ d' | sed '/-$/ d' | sed '/CERTIFICATE-----/ d' >> certs/credhub_ca_cert
          echo "-----END CERTIFICATE-----" >> certs/credhub_ca_cert
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.secret))
      CREDHUB_SERVER: ((credhub.server))
      CREDHUB_CA_CERT: files/credhub_ca_cert
      PREFIX: '/pipeline/grape'
      INTERPOLATION_PATH: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/opsman.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-platform-automation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: one-time-trigger
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: opsman-product
        - get: config
        - get: variable
    
    - task: write-credhub-ca-cert
      params:
        CA_CERT_VALUE: ((credhub.ca_cert))
      output_mapping:
        certs: variable
      input_mapping:
        files: variable
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: edge
        inputs:
          - name: files
        outputs:
          - name: certs
        run:
          path: /bin/sh
          args:
          - -c
          - |
            cp -a files/. certs/

            # Format the cert correctly... because the env var lost its formatting
            echo $CA_CERT_VALUE > certs/temp
            echo "-----BEGIN CERTIFICATE-----" > certs/credhub_ca_cert
            cat certs/temp | sed -E 's/\s+/\r\n/g' | sed '/^-/ d' | sed '/-$/ d' | sed '/CERTIFICATE-----/ d' >> certs/credhub_ca_cert
            echo "-----END CERTIFICATE-----" >> certs/credhub_ca_cert
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub.client))
        CREDHUB_SECRET: ((credhub.secret))
        CREDHUB_SERVER: ((credhub.server))
        CREDHUB_CA_CERT: files/credhub_ca_cert
        PREFIX: '/pipeline/grape'
        INTERPOLATION_PATH: "((foundation))"
      input_mapping:
        files: variable
      output_mapping:
        interpolated-files: variable

    # - task: create-vm
    #   image: platform-automation-image
    #   file: platform-automation-tasks/tasks/create-vm.yml
    #   input_mapping:
    #     image: opsman-product
    #     state: config
    #     config: config
    #     vars: variable
    #   params:
    #     VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
    #     STATE_FILE: ((foundation))/state/state.yml
    #     OPSMAN_CONFIG_FILE: opsman.yml
    #   ensure: &make-state-commit
    #     do:
    #       - task: make-commit
    #         image: platform-automation-image
    #         file: platform-automation-tasks/tasks/make-git-commit.yml
    #         input_mapping:
    #           repository: config
    #           file-source: generated-state
    #         output_mapping:
    #           repository-commit: configuration-commit
    #         params:
    #           FILE_SOURCE_PATH: state.yml
    #           FILE_DESTINATION_PATH: ((foundation))/state/state.yml
    #           GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
    #           GIT_AUTHOR_NAME: "Platform Automation Bot"
    #           COMMIT_MESSAGE: 'Update state file'
    #       - put: config
    #         params:
    #           repository: configuration-commit
    #           merge: true
    # - task: configure-authentication
    #   image: platform-automation-image
    #   file: platform-automation-tasks/tasks/configure-authentication.yml
    #   attempts: 10
    #   input_mapping:
    #     env: config
    #     config: config
    #   params:
    #     ENV_FILE: ((foundation))/env/env.yml
    #     AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        config: config
        env: config
        vars: variable
      params:
        VARS_FILES: vars/((foundation))/vars/director-vars.yml
        ENV_FILE: ((foundation))/env/env.yml
        DIRECTOR_CONFIG_FILE: director.yml
    # - task: apply-director-changes
    # image: platform-automation-image
    # file: platform-automation-tasks/tasks/apply-director-changes.yml
    # input_mapping:
    #   env: configuration
    # params:
    #   ENV_FILE: ((foundation))/env/env.yml
